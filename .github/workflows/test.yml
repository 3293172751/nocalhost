name: test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
  workflow_run:
    workflows: [ "release" ]
    types: [ completed ]

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.4'
      - run: go version
      - name: git tag
        timeout-minutes: 10
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(git tag | tail -2 | xargs)
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
        shell: bash
      - uses: engineerd/setup-kind@v0.5.0
        timeout-minutes: 10
      - name: Kubernetes info
        timeout-minutes: 5
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          cat ~/.kube/config
          ls -lah ~/.kube/config
      - name: Testing
        run: |
          export TAG="${{ env.RELEASE_VERSION }}"
          export COMMIT_ID=${GITHUB_SHA}
          export KUBECONFIG_PATH=/home/runner/.kube/config
          export TESTCASE_WEBHOOK=${{ secrets.TESTCASE_WEBHOOK }}
          export ProjectId=${{ secrets.coding_project_id }}
          export Token=${{ secrets.coding_token }}
          cd test
          go build
          ./test
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.4'
      - run: go version
      - name: git tag
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        timeout-minutes: 10
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(echo $(git tag | tail -2))
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
        shell: bash
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v1
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
      - name: Testing
        shell: bash
        run: |
          export TAG="${{ env.RELEASE_VERSION }}"
          export COMMIT_ID=${GITHUB_SHA}
          export ProjectId=${{ secrets.coding_project_id }}
          export Token=${{ secrets.coding_token }}
          export TKE_SECRET_ID=${{ secrets.TKE_SECRET_ID }}
          export TKE_SECRET_KEY=${{ secrets.TKE_SECRET_KEY }}
          export TESTCASE_WEBHOOK=${{ secrets.TESTCASE_WEBHOOK }}
          cd test
          go build
          ./test
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.4'
      - run: go version
      - name: git tag
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        timeout-minutes: 10
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(echo $(git tag | tail -2))
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
        shell: bash
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v1
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
      - name: Testing
        shell: bash
        run: |
          echo ${{ env.RELEASE_VERSION }}
          export TAG="${{ env.RELEASE_VERSION }}"
          export COMMIT_ID=${GITHUB_SHA}
          export ProjectId=${{ secrets.coding_project_id }}
          export Token=${{ secrets.coding_token }}
          export TKE_SECRET_ID=${{ secrets.TKE_SECRET_ID }}
          export TKE_SECRET_KEY=${{ secrets.TKE_SECRET_KEY }}
          export TESTCASE_WEBHOOK=${{ secrets.TESTCASE_WEBHOOK }}
          cd test
          go build
          ./test

  minikube-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.4'
      - run: go version
      - name: git tag
        timeout-minutes: 10
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(git tag | tail -2 | xargs)
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
        shell: bash
      - name: Setup Minikube
        timeout-minutes: 30
        uses: medyagh/setup-minikube@master
      - name: Sleep 180 seconds waiting for minikube ready
        run: sleep 180
      - name: Kubernetes info
        timeout-minutes: 5
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          cat ~/.kube/config
          ls -lah ~/.kube/config
      - name: Testing
        run: |
          export TAG="${{ env.RELEASE_VERSION }}"
          export COMMIT_ID=${GITHUB_SHA}
          export ProjectId=${{ secrets.coding_project_id }}
          export Token=${{ secrets.coding_token }}
          export KUBECONFIG_PATH=/home/runner/.kube/config
          export TESTCASE_WEBHOOK=${{ secrets.TESTCASE_WEBHOOK }}
          cd test
          go build
          ./test
